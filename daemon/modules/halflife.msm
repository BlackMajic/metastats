# Metastats Listener Daemon - Half-Life Game Support Module
# ---------------------------------------------------------
# A statistical data logger for multiplayer games
# Copyright (c) 2004-2006, Nick Thomson.
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

package halflife;
use strict;
use POSIX;

# void init ()
# This function is called when Metastats loads the module.
# Inside should be any initialisation code which the module
# needs to perform BEFORE any sockets etc are set up.
#
sub init
{
	shift;
	
	print "\t\t\t\t[  ok  ]\n";
	
	return 1;
}

# void parse (string server_id, gametype, data)
# 
# This function is called by Metastats when data is
# available for parsing. Metastats checks the sender's
# IP and port to see which module to send it to, and also
# finds out which MOD module our GAME module should pass
# pre-parsed code on to.
# ip, and port are self explainatory
# gametype is the name of the module to call for later
# mod-specific parsing.
#
sub parse
{
	shift;
	our ($db, $server, $line) = @_;
	my ($utime, $htime, $otime, $trackID);
	
	my $ext = $server->{Extension};
	
	if ($main::conf{Mode} eq 'lan') {
		$trackID = 'IP';
	} elsif ($main::conf{Mode} eq 'name') {
		$trackID = 'Name';
	} else {
		$trackID = 'SteamID';
	}
	
	$line =~ s/[\r\n\0]//g; # Remove Naughty Characters
	
	# Get timestamp, matches and removes "*L MM/DD/YYYY - HH:MM:SS: "
	#                                        $1 $2  $3    $4 $5 $6
	if ($line =~ s/^.*L (\d\d)\/(\d\d)\/(\d{4}) - (\d\d):(\d\d):(\d\d):\s*//) {
		my ($mo, $d, $yr, $h, $m, $s) = ($1, $2, $3, $4, $5, $6);
		if (!$main::conf{UseTimestamp}) {
			# Use System Time
			($s, $m, $h, $d, $mo, $yr) = localtime(time());
			$mo++;
			$yr += 1900;
		}
		$h  =~ s/^[0-9]{1}$/0$h/;
		$m  =~ s/^[0-9]{1}$/0$m/;
		$s  =~ s/^[0-9]{1}$/0$s/;
		$d  =~ s/^[0-9]{1}$/0$d/;
		$mo =~ s/^[0-9]{1}$/0$mo/;
		
		$utime = main::timegm($s, $m, $h, $d, ($mo)-1, ($yr)-1900);
		$htime = "$h:$m:$s $d/$mo/$yr";
		$otime = "L $mo/$d/$yr - $h:$m:$s:";
	} else {
		main::errorMessage("MALFORMED DATA: $line");
		return 0;
	}
	
	
	if ($line =~ /^\/\//) {
		# 000. // Comment
		# I am a comment, Ignore me.
	} elsif ($line =~ /^Server cvar/) {
		if ($line =~ /^Server cvars start$/) {
			# 001.a Server cvars start
			
			main::debugMessage("CVARS: start", 3);
			
		} elsif ($line =~ /^Server cvar \"(.*?)\" = \"(.*?)\"$/) {
			# 001.b Server cvar "var = "value"
			# $1 = Var
			# $2 = Value
			
			main::debugMessage("Handing to $ext", 3);
			$ext->cvarEvent($server, $utime, $1, $2);
			
		} elsif ($line =~ /^Server cvars end$/) {
			# 001.c Server cvars end
			
			main::debugMessage("CVARS: end", 3);
		}
	} elsif ($line =~ /^Log/) {
		if ($line =~ /^Log file started \(file \"(.*?)\"\) \(game \"(.*?)\"\) \(version \"(.*?)\/(.*?)\/(.*?)\"\)/) {
			# 002.a Log file started (file "name") (game "game") (version "protocol/release/build")
			# $1 = File
			# $2 = Game
			# $3 = Protocol
			# $4 = Release
			# $5 = Build
			
			my $out = "LOG: started logging to $1 for game: $2\n";
			$out .= "LOG: protocol: $3 / release: $4 / build: $5";
			main::debugMessage($out, 2);
			
			$server->{LogFile} = $1;
			$server->{LogFile} =~ s/^logs\///;
			if ($main::conf{LogCloneDir}) {
				my $filePath = "$main::conf{LogCloneDir}/$server->{ID}/$server->{LogFile}";
				$server->{LogFileHandle}->open($filePath, ">") or main::errorMessage("Could not open $filePath for write");
			}
		} elsif ($line =~ /^Log file closed/) {
			# 002.b Log file closed
			if ($server->{LogFileHandle}->fileno && $main::conf{LogCloneDir}) {
				print { $server->{LogFileHandle} } "$otime $line\n";
				$server->{LogFileHandle}->close() or main::errorMessage("Could not close LogFileHandle");
			}
			$server->{LogFile} = '';
			main::debugMessage("LOG: file closed", 2);
		}
	} elsif ($line =~  /^(Loading|Started) map \"(.*?)\" (\(CRC \"(.*?)\"\))?/) {
		# $1 = [Loading|Started]
		# $2 = Map name
		# $3 = "(CRC "...")"
		# $4 = CRC value
		
		if ($1 eq 'Loading') {
			# 003.a Loading map "map"
			
			main::debugMessage("MAP: Loading $2", 3);
		} elsif ($1 eq 'Started') {
			# 003.b Started map "map" (CRC "crc")
			
			main::debugMessage("MAP: Started $2 (CRC $4)", 3);
		}
		$server->{Map} = $2;
		main::debugMessage("Handing to $ext", 3);
		$ext->mapEvent($server, $utime, $1, $2, $4);
	} elsif ($line =~ /^(Bad Rcon|Rcon)\: \"rcon (\d+) \"(.*?)\" (.*)\" from \"(.*?)\"/) {
		# 004.a     Rcon: "rcon challenge "pass" command" from "ip:port"
		# 004.b Bad Rcon: "rcon challenge "pass" command" from "ip:port"
		# $1 = [Bad Rcon|Rcon]
		# $2 = challenge
		# $3 = password
		# $4 = command
		# $5 = ip:port
		
		if ($1 eq 'Rcon') {
			# Stored and used passwords are different, update database
			if ($server->{Rcon} ne $3 && !$server->{IgnoreRcon}) {
				my $query = "UPDATE
						$main::conf{DBPrefix}_core_servers
					SET
						server_rcon = '$3'
					WHERE
						server_id = $server->{ID}";
				main::dbQuery($db, $query);
				main::debugMessage(" -- Updated Rcon password from $server->{Rcon}", 1);
				$server->{Rcon} = $3;
			}
		} elsif ($1 eq 'Bad Rcon') {
			if ($server->{Rcon} eq $3) {
				# protect from rcon ban
				my $query = "UPDATE
						$main::conf{DBPrefix}_core_servers
					SET
						server_rcon = ''
					WHERE
						server_id = $server->{ID}";
				main::dbQuery($db, $query);
				main::debugMessage(" -- Protected Metastats from ban", 1);
				$server->{Rcon} = '';
			}
		}
		if ($main::conf{RconRecord} == 1) {
			my $ip = (split(/\:/, $5))[0];
			my $query = "INSERT
				INTO
					$main::conf{DBPrefix}_halflife_events_rcon
				VALUES ('',
					$utime,
					$server->{ID},
					'$server->{Map}',
					'$1',
					'$ip',
					'$3',
					'$4')";
			main::dbQuery($db, ($query));
		}
	} elsif ($line =~ /^Server name is \"(.*)\"/) {
		# 005. Server name is "hostname"
		# $1 = hostname
		
		main::debugMessage("SERVER NAME: $1", 3);
		my $query = "UPDATE
				$main::conf{DBPrefix}_core_servers
			SET
				server_name = '$1'
			WHERE
				server_id = $server->{ID}";
		$server->{Name} = $1;
	} elsif ($line =~ /^Server say \"(.*)\"/) {
		# 006. Server say "message"
		# $1 = message
		
		main::debugMessage("SERVER SAID: $1", 3);
	} elsif ($line =~ /^Team/) {
		# 061. Team "team" triggered "action"
		# 064. Team "team" formed alliance with team "team"
		# 065. Team "team" scored "score" with "numplayers" players
		
		$line =~ s/^Team \"(.*?)\"\s+//;
		# Pass the team and the rest of the line to the ext.
		main::debugMessage("Handing to $ext", 3);
		$ext->teamEvent($server, $utime, $1, $line);
	} elsif ($line =~ /^World triggered \"(.*?)\"/) {
		# 062. World triggered "action"
		# $1 = action
		
		main::debugMessage("Handing to $ext", 3);
		$ext->worldEvent($server, $utime, $1);
	} elsif ($line =~ /^(\"|Player|Kick)/) {
		# 050-060, 063, 066-069
		
		my %player = ();
		if ($1 eq 'Player') {
			$line =~ s/^Player \"(.*?)<(.*?)><(.*?)><(.*?)>\"\s*//;
			($player{Name}, $player{UID}, $player{SteamID}, $player{Team}) = ($1, $2, $3, $4);
		} elsif ($1 eq 'Kick') {
			$line =~ s/^Kick: \"(.*?)<(.*?)><(.*?)><(.*?)>\"\s*//;
			($player{Name}, $player{UID}, $player{SteamID}, $player{Team}) = ($1, $2, $3, $4);
		} elsif ($1 eq '"') {
			$line =~ s/^\"(.*?)<(.*?)><(.*?)><(.*?)>\"\s*//;
			($player{Name}, $player{UID}, $player{SteamID}, $player{Team}) = ($1, $2, $3, $4);
			
			if ($line =~ s/^connected, address\s*\"([\d.]+)\:(\d+)\"//) {
				$player{IP}   = $1;
				$player{Port} = $2;
				main::debugMessage("CONNECTED: $player{Name} <$player{$trackID}> ($player{IP})", 3);
				my $query = "SELECT
						player_id
					FROM
						$main::conf{DBPrefix}_halflife_playeruniqueids
					WHERE
						unique_id = '$player{$trackID}'
					AND
						module = '$server->{Extension}'";
				my $result = (main::dbQuery($db, $query))[0];
				$player{ID} = $result->{player_id};
				
				if ($result->{rows} < 1) {
					# New Player!
					$query = "INSERT INTO
							$main::conf{DBPrefix}_halflife_players
							(last_name)
						VALUES
							('$player{Name}')";
					main::dbQuery($db, $query);
					$query = "SELECT LAST_INSERT_ID()";
					$result = (main::dbQuery($db, $query))[0];
					$player{ID} = $result->{'last_insert_id()'};
					$query = "INSERT INTO
							$main::conf{DBPrefix}_halflife_playeruniqueids
						VALUES ('$player{ID}',
							'$player{$trackID}',
							'$server->{Extension}',
							'');
						
						INSERT INTO
							$main::conf{DBPrefix}_halflife_playernames
						VALUES ($player{ID},
							'$player{$trackID}',
							UNIX_TIMESTAMP(),
							1,
							0,0,0)";
					main::dbQuery($db, $query);
					$server->{'Players'}{$trackID} = \%player;
					main::debugMessage("Added new player: $player{Name}", 3);
				} else {
					# Old news
					$query = "UPDATE
							$main::conf{DBPrefix}_halflife_playernames
						SET
							lastuse = UNIX_TIMESTAMP(),
							numuses = numuses + 1
						WHERE
							player_id = $player{ID}
						AND	name = $player{Name}";
					main::dbQuery($db, $query);
					$server->{Players}{$trackID} = %player;
				}
				return 0;
			} elsif ($line =~ s/^STEAM USERID verified//) {
				# We should actually do most of the connect stuff here.
				return 0;
			} elsif ($line =~ /^entered the game/) {
				#$server->{Players}{$player{$trackID}} = $server->{Preconnect}{$player{$trackID}};
				$server->{NumPlayers}++;
				main::debugMessage("NumPlayers: $server->{NumPlayers}", 2);
			} elsif ($line =~ /^disconnected/) {
				delete $server->{Players}{$player{$trackID}};
				$server->{NumPlayers}--;
				main::debugMessage("NumPlayers: $server->{NumPlayers}", 2);
			}
		}
		main::errorMessage($line);
		main::debugMessage("Handing to $ext", 3);
		$ext->playerEvent($db, $server, $utime, \%player, $line);
	} else {
		main::errorMessage("UNRECOGNISED: $line");
	}
	$server->{LogFileHandle}->print("$otime $line\n") if ($server->{LogFileHandle}->fileno && $main::conf{LogCloneDir});
	
	return 1;
}

# array parseName (string data)
# Takes a HL log format name (name, sid, steamid, team)
# and parses it into individual variables
sub parseName
{
	my ($pData) = @_;
	my @rvals = ();
	$pData =~ /^(.*?)\<(\d*?)\>\<(.*?)\>\<(.*?)\>$/;
	#print "parseName: $1, $2, $3, $4\n";
	push @rvals, ($1, $2, $3, $4);
	return @rvals;
}

# void learnEvent(string type, mixed ...)
#
sub learnEvent
{
	my ($vars) = @_;
	
}

1;
