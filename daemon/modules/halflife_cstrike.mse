# Metastats Listener Daemon - Half-Life Counter-Strike Extension Module
# ---------------------------------------------------------------------
# A statistical data logger for multiplayer games
# Copyright (c) 2006 Tim McLennan.
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

use strict "vars";
use POSIX;
package halflife_cstrike;

sub init
{
	our %r = {};
#	$r{Player} = gw/\"(.*?)<(\d+)><(.*?)><(.*?)>\"/;
	print "\t\t\t[  ok  ]\n";
	return 1;
}

# void playerEvent(string event_time, event_type, event_object; array @player1, @player2)
#
# This function is called by the gamesupport module when an event happens.
# The parameters take different contents based on event type, and may not always be filled.
# eg. with RCON, event_time = time, event_type = 'RCON', and @player1 = ('command', 'from', 'password')
#
sub playerEvent
{
	shift;
	my ($db, $server, $utime, $player, $line) = @_;
	my ($verb, %victim, $action, $message, $weapon, %properties);
	
	my $trackID;
	if ($main::conf{Mode} eq 'name') {
		$trackID = 'Name';
	} elsif ($main::conf{Mode} eq 'lan') {
		$trackID = 'IP';
	} else {
		$trackID = 'SteamID';
	}
	main::errorMessage($line); # TODO: Remove when not testing
	$line =~ s/^([^\"\(]+)\s*//;
	$verb = $1;
	
	print "'$verb' - '$line'";
	if ($line =~ s/^\"(.*?)<(\d+)><(.*?)><(.*?)>\"//) {
		$victim{Name}    = $1;
		$victim{UID}     = $2;
		$victim{SteamID} = $3;
		$victim{Team}    = $4;
		
		if ($verb eq 'killed' || $verb eq 'attacked') {
			# 057. Kills
			# 058. Injuring
			
			$line =~ /^with \"(.*?)\" ?(.*?)$/;
			$weapon     = $1;
			%properties = getProperties($2);
			if ($verb eq 'killed') {
				main::debugMessage("$player->{Name} killed $victim{Name} with $weapon");
			} else {
				main::debugMessage("$player->{Name} attacked $victim{Name} with $weapon for $properties{damage} damage");
			}
		}
	} else {
		if ($verb eq 'triggered') {
			if ($line =~ /^\"(.*?)\" against \"(.*?)<(\d\d)><(.*?)><(.*?)>\" (.*?)$/) {
				$action          = $1;
				$victim{Name}    = $2;
				$victim{UID}     = $3;
				$victim{SteamID} = $4;
				$victim{Team}    = $5;
				%properties      = getProperties($6);
				main::debugMessage("$player->{Name} triggered $action against $victim{Name}");
# reward player, reward victim?
			} elsif ($line =~ /^\"(.*?)\" (.*?)$/) {
				$action     = $1;
				%properties = getProperties($2);
				main::debugMessage("$player->{Name} triggered $action");
# reward player
			}
		} elsif ($verb eq 'committed suicide with') {
			$line =~ /\"(.*?)\"$/;
			$weapon = $1;
# suicides++, lower skill by weapon modifier
			main::debugMessage("$player->{Name} committed suicide with $weapon");
		} elsif ($verb eq 'joined team') {
			# 054. Team selection
			$line =~ /\"(.*?)\"$/;
			$player->{Team} = $1;
# update %server's team list, update db
			main::debugMessage("$player->{Name} joined $1");
		} elsif ($verb eq 'changed role to') {
			# 055. Role selection
			$line =~ /\"(.*?)\"$/;
			$player->{Role} = $1;
# update db
			main::debugMessage("$player->{Name} changed role to $1");
		} elsif ($verb eq 'say' || $verb eq 'say_team') {
			$line =~ /\"(.*?)\" ?(.*)?$/;
			$message    = $1;
			%properties = getProperties($2);
			main::debugMessage("$player->{Name} said $message");
# Call talk handler module
		} elsif ($verb eq 'changed name to') {
			$line =~ s/^\"(.+)\"$//;
			# Query
			my $query = "SELECT
					player_id,
					numuses
				FROM
					$main::conf{DBPrefix}_halflife_playernames
				WHERE
					player_id = '$player->{ID}'
				AND
					name = '$player->{Name}'";
			my $result = (main::dbQuery($db, $query))[0];
			if ($result->{rows} < 1) {
				$query = "INSERT INTO
						$main::conf{DBPrefix}_halflife_playernames
					VALUES ('$player->{ID}',
						'$1',
						UNIX_TIMESTAMP(),
						1,
						0,
						0,
						0";
			} else {
				$query = "UPDATE
						$main::conf{DBPrefix}_PlayerNames
					SET
						lastuse = UNIX_TIMESTAMP(),
						numuses = numuses+1
					WHERE
						player_id = '$player->{ID}'
					AND
						name = '$1'";
			}
			main::dbQuery($db, $query);

			# Update tracking
			$server->{Players}{$player->{ID}}->{Name} = $1;
			if ($main::conf{Mode} eq 'name') {
				my %tmp = $server->{Player}{$player->{Name}};
				$server->{Players}{$1} = %tmp;
				delete $server->{Players}{$player->{Name}};
				$server->{Players}{$1}->{Name} = $1;
			}
			print main::debugMessage("$player->{Name} changed name to $1");
		} else {
			main::errorMessage("UNRECOGNISED CSTRIKE PLAYER EVENT: $verb - $line");
# db insert for auto-learn
		}
	}
	return 1;
}

sub teamEvent
{
	shift;
	my ($server, $utime, $team, $line) = @_;
	my ($verb, $ally, $score, $numplayers, $action, %properties);
	
	$line =~ s/([^\"\(]+)\s+//;
	$verb = $1;
	
	if ($verb eq 'triggered') {
		my $out;
		$line =~ /\"(.*?)\" (.*?)$/;
		$action = $1;
		%properties = getProperties($2);
# Reward team
		main::debugMessage("$team triggered $action");
		foreach my $i (keys %properties) {
			$out .= " ($i $properties{$i})";
		}
		main::debugMessage($out);
	} elsif ($verb eq 'formed alliance with team') {
		$line =~ /^\"(.*?)\"$/;
		$ally = $1;
# setup alliance table
# if a player from team kills a player from ally, count as TK.
		main::debugMessage("$team is allied with $ally");
	} elsif ($verb eq 'scored') {
		$line =~ /^\"(.*?)\" with \"(.*?)\" players$/;
		$score      = $1;
		$numplayers = $2;
# award players on team with score/numplayers
		main::debugMessage("$team scored $score with $numplayers players");
	} else {
		main::errorMessage("UNRECOGNISED CSTRIKE TEAM EVENT: $verb - $line");
# learn team event
	}
}

sub mapEvent
{
	shift;
	my ($server, $utime, $event, $map, $crc) = @_;
	return 1;
}

sub worldEvent
{
	shift;
	my ($server, $utime, $event) = @_;
	
	main::debugMessage("World triggered $event", 3);
	return 1;
}

sub cvarEvent
{
	shift;
	my ($server, $utime, $cvar, $value) = @_;

	main::debugMessage("$cvar = $value", 3);
	return 1;
}

sub getProperties
{
	my ($props) = @_;
	my ($prop, %ret, %prev);
	
	if ($props =~ s/^\((.*?)\)\s+//) {
		$prop = $1;
		if ($prop =~ /^(.*?) \"(.*?)\"$/) {
			$ret{$1} = $2;
		} elsif ($prop =~ /^([^"]+)$/) {
			$ret{$1} = 1;
		}
		%prev = getProperties($props);
	} elsif ($props =~ s/^\((.*?)\)$//) {
		# Last property
		$prop = $1;
		if ($prop =~ /^(.*?) \"(.*?)\"$/) {
			$ret{$1} = $2;
		} elsif ($prop =~ /^([^"]+)$/) {
			$ret{$1} = 1;
		}
	}
	
	foreach my $i (keys %prev) {
		$ret{$i} = $prev{$i};
	}
	return %ret;
}

1;
